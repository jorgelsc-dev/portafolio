---
apiVersion: batch/v1
kind: Job
metadata:
  name: docker-build-job
spec:
  template:
    spec:
      containers:
        - name: docker
          image: docker:19.03.12
          command: ["docker", "build", "-t", "myapp:latest", "/workspace"]  # Construir la imagen en /workspace
          volumeMounts:
            - mountPath: /workspace
              name: workspace
      initContainers:
        - name: clone-repo
          image: alpine:3.14
          command: ["sh", "-c", "apk add --no-cache git && git clone https://github.com/youruser/yourrepo.git /workspace"]  # Clona el repositorio
          volumeMounts:
            - mountPath: /workspace
              name: workspace
      restartPolicy: Never
      volumes:
        - name: workspace
          emptyDir: {}  # Volumen temporal para construcción
  backoffLimit: 4

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      initContainers:
        - name: create-dir
          image: busybox
          command: ["sh", "-c", "mkdir -p /mnt/data/myapp"]  # Crear el directorio en el nodo
          volumeMounts:
            - name: workspace
              mountPath: /mnt/data
      containers:
        - name: myapp
          image: myapp:latest  # Esta es la imagen local construida por el Job
          ports:
            - containerPort: 80
          volumeMounts:
            - name: workspace
              mountPath: /mnt/data/myapp  # Montaje del volumen
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /readiness
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: workspace
          hostPath:
            path: /mnt/data/myapp  # Montaje en el directorio del nodo
            type: DirectoryOrCreate  # Asegura que se cree si no existe

---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080  # Puerto donde estará accesible el servicio en el nodo
  type: NodePort
